# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере. 
# Необходимо запрашивать у пользователя данные и заполнять список. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. 
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента необходимо реализовать 
# проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить 
# соответствующее сообщение. При этом работа скрипта не должна завершаться.


class MyError(Exception):
    def __init__(self, txt):
        self.txt = txt

    @staticmethod
    def TestList(varlist):
        i = 0
        for var in varlist:
            if not var.isdigit():
                raise MyError("Элемент "+ str(i) + " не число")
            i += 1

    @staticmethod
    def TestInt(varint):
        if not varint.isdigit():
            raise MyError("Вы ввели не число")

var_list = []
while True:
    try:
        a = input('Введите число  "q - выход" : ')
        if a == 'q':
            break
        MyError.TestInt(a)
        a = int(a)
        var_list.append(a)
        

    except MyError as e:
        print(e)

    except Exception as e:
        print(e)

MyError(var_list) #на всякий случай
print(var_list)